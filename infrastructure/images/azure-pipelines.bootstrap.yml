trigger:
  batch: true
  branches:
    include:
      - main

variables:
  - group: terraform-packer
  - name: DEBIAN_FRONTEND
    value: noninteractive
  - name: toolset_version
    value: 1804
  - name: image_os
    value: ubuntu18
  - name: image_type
    value: ubuntu2004
    
stages:
  - stage: 'Bootstrap'
    pool: 'VMSS'
    jobs:
      - job:
        displayName: 'Initial Image Generation'
        timeoutInMinutes: 600
        cancelTimeoutInMinutes: 30
        variables:
          - name: base_dir
            value: $(template_dir)/scripts/base
          - name: helper_script_folder
            value: $(image_folder)/helpers
          - name: imagedata_file
            value: $(image_folder)/imagedata.json
          - name: image_folder
            value: /imagegeneration
          - name: image_version
            value: dev
          - name: installer_script_folder
            value: $(image_folder)/installers
          - name: template_dir 
            value: /imagetemplate
        steps:
          - checkout: self
            fetchDepth: 1

          - task: Bash@3
            displayName: 'Create image folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'mkdir $(image_folder)'
                sudo -E sh -c 'chmod 777  $(image_folder)'

          - task: Bash@3
            displayName: 'Create template folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'mkdir $(template_dir)'
                sudo -E sh -c 'cp -Rv ./infrastructure/images/linux/* $(template_dir)'
                sudo -E sh -c 'chmod -Rv +x  $(template_dir)/*'

          - task: Bash@3
            displayName: 'BASE: apt-mock'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(base_dir)/apt-mock.sh"'

          - task: Bash@3
            displayName: 'BASE: repos'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(base_dir)/repos.sh"'

          - task: Bash@3
            displayName: 'BASE: apt'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(base_dir)/apt.sh"'
          
          - task: Bash@3
            displayName: 'BASE: limits'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(base_dir)/limits.sh"'

          - task: Bash@3
            displayName: 'Create helper folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'mkdir $(helper_script_folder)'
                sudo -E sh -c 'cp -Rv $(template_dir)/scripts/helpers/* $(helper_script_folder)'
                # sudo -E sh -c 'chmod -Rv 777  $(helper_script_folder)/*'

          - task: Bash@3
            displayName: 'Create installers folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'mkdir $(installer_script_folder)'
                sudo -E sh -c 'cp -Rv $(template_dir)/scripts/installers/* $(installer_script_folder)'
                # sudo -E sh -c 'chmod -Rv 777  $(installer_script_folder)/*'

          - task: Bash@3
            displayName: 'Copy post-generation folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'cp -Rv $(template_dir)/post-generation $(image_folder)'
                # sudo -E sh -c 'chmod -Rv 777  $(image_folder)/*'
    
          - task: Bash@3
            displayName: 'Copy tests folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'cp -Rv $(template_dir)/scripts/tests $(image_folder)'
                # sudo -E sh -c 'chmod -Rv 777  $(image_folder)/*'

          - task: Bash@3
            displayName: 'Copy SoftwareReport folder'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'cp -Rv $(template_dir)/scripts/SoftwareReport $(image_folder)'
                # sudo -E sh -c 'chmod -Rv 777  $(image_folder)/*'

          - task: Bash@3
            displayName: 'Copy toolset manifest'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c 'cp -Rv $(template_dir)/toolsets/toolset-$(toolset_version).json $(installer_script_folder)/toolset.json'
                # sudo -E sh -c 'chmod -Rv 777  $(installer_script_folder)/*'

          - task: Bash@3
            displayName: 'INSTALLER: preimagedata'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(installer_script_folder)/preimagedata.sh"'

          - task: Bash@3
            displayName: 'INSTALLER: configure-environment'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(installer_script_folder)/configure-environment.sh"'

          - task: Bash@3
            displayName: 'INSTALLER: complete-snap-setup'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(installer_script_folder)/complete-snap-setup.sh"'
            env:
              HELPER_SCRIPTS: $(helper_script_folder)

          - task: Bash@3
            displayName: 'INSTALLER: powershellcore'
            inputs:
              targetType: 'inline'
              script: 'sudo -E sh -c "$(installer_script_folder)/powershellcore.sh"'

          - task: Bash@3
            displayName: 'INSTALLER: powershell modules'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                sudo -E sh -c "pwsh -f $(installer_script_folder)/Install-PowerShellModules.ps1"
                sudo -E sh -c "pwsh -f $(installer_script_folder)/Install-AzureModules.ps1"
            env:
                HELPER_SCRIPTS: $(helper_script_folder)
                
          - task: Bash@3
            displayName: 'INSTALLER: common packages'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                declare -a SCRIPTS=(
                                    "7-zip.sh"
                                    "ansible.sh"
                                    "azcopy.sh"
                                    "azure-cli.sh"
                                    "basic.sh"
                                    "aliyun-cli.sh"
                                    "aws.sh"
                                    "build-essential.sh"
                                    "clang.sh"
                                    "swift.sh"
                                    "cmake.sh"
                                    "codeql-bundle.sh"
                                    "containers.sh"
                                    "docker-compose.sh"
                                    "docker-moby.sh"
                                    "firefox.sh"
                                    "gcc.sh"
                                    "gfortran.sh"
                                    "git.sh"
                                    "github-cli.sh"
                                    "google-chrome.sh"
                                    "google-cloud-sdk.sh"
                                    "haskell.sh"
                                    "heroku.sh"
                                    "hhvm.sh"
                                    "image-magick.sh"
                                    "java-tools.sh"
                                    "kubernetes-tools.sh"
                                    "oc.sh"
                                    "leiningen.sh"
                                    "mercurial.sh"
                                    "miniconda.sh"
                                    "mysql.sh"
                                    "mssql-cmd-tools.sh"
                                    "nvm.sh"
                                    "nodejs.sh"
                                    "bazel.sh"
                                    "oras-cli.sh"
                                    "phantomjs.sh"
                                    "php.sh"
                                    "pollinate.sh"
                                    "postgresql.sh"
                                    "pulumi.sh"
                                    "ruby.sh"
                                    "r.sh"
                                    "rust.sh"
                                    "julia.sh"
                                    "sbt.sh"
                                    "selenium.sh"
                                    "sphinx.sh"
                                    "subversion.sh"
                                    "terraform.sh"
                                    "packer.sh"
                                    "vcpkg.sh"
                                    "vercel.sh"
                                    "dpkg-config.sh"
                                    "mongodb.sh"
                                    "rndgenerator.sh"
                                    "swig.sh"
                                    "netlify.sh"
                                    )
                
                for SCRIPT in "${SCRIPTS[@]}"
                do
                  sudo -E sh -c "$(installer_script_folder)/${SCRIPT}"
                done  
            env:
                HELPER_SCRIPTS: $(helper_script_folder)

          - task: Bash@3
            displayName: 'Fix Home Directory Permissions'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                # AZ CLI task fails without this.
                sudo chmod -Rv 755 /home/AzDevOps

          - task: AzureCLI@2
            displayName: 'Set image template variables'
            inputs:
              azureSubscription: 'Azure'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $ImageType = "$(image_type)"
                $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "linux" } else { "win" }
                $TemplateDirectoryPath = Join-Path "infrastructure/images" $TemplateDirectoryName | Resolve-Path
                $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.json"
                Write-Host "##vso[task.setvariable variable=TemplateDirectoryPath;]$TemplateDirectoryPath"
                Write-Host "##vso[task.setvariable variable=TemplatePath;]$TemplatePath"
                Write-Host "##vso[task.setvariable variable=AZURE_SUBSCRIPTION;issecret=true]$(az account show --query 'id' -o tsv)"
                
          - task: AzureCLI@2
            displayName: 'Build VM'
            inputs:
              azureSubscription: 'Azure'
              scriptType: 'pscore'
              scriptLocation: 'scriptPath'
              scriptPath: './infrastructure/images/build-image.ps1'
              arguments: -ResourcesNamePrefix $(Build.BuildId) `
                                -ClientId $env:servicePrincipalId `
                                -ClientSecret $env:servicePrincipalKey `
                                -TemplatePath $(TemplatePath) `
                                -ResourceGroup $(AZURE_RESOURCE_GROUP) `
                                -StorageAccount $(AZURE_STORAGE_ACCOUNT) `
                                -SubscriptionId $(AZURE_SUBSCRIPTION) `
                                -TenantId $env:tenantId `
                                -Location $(AZURE_LOCATION) `
                                -VirtualNetworkName $(BUILD_AGENT_VNET_NAME) `
                                -VirtualNetworkRG $(BUILD_AGENT_VNET_RESOURCE_GROUP) `
                                -VirtualNetworkSubnet $(BUILD_AGENT_SUBNET_NAME) `
                                -GitHubFeedToken $(GITHUB_TOKEN)
              addSpnToEnvironment: true
            env:
              PACKER_LOG: 1
              PACKER_LOG_PATH: $(Build.ArtifactStagingDirectory)/packer-log.txt

              
          #    {
          #     "variables": {
          #         "client_id": "{{env `ARM_CLIENT_ID`}}",
          #         "client_secret": "{{env `ARM_CLIENT_SECRET`}}",
          #         "subscription_id": "{{env `ARM_SUBSCRIPTION_ID`}}",
          #         "tenant_id": "{{env `ARM_TENANT_ID`}}",
          #         "resource_group": "{{env `ARM_RESOURCE_GROUP`}}",
          #         "storage_account": "{{env `ARM_STORAGE_ACCOUNT`}}",
          #         "temp_resource_group_name": "{{env `TEMP_RESOURCE_GROUP_NAME`}}",
          #         "location": "{{env `ARM_RESOURCE_LOCATION`}}",
          #         "virtual_network_name": "{{env `VNET_NAME`}}",
          #         "virtual_network_resource_group_name": "{{env `VNET_RESOURCE_GROUP`}}",
          #         "virtual_network_subnet_name": "{{env `VNET_SUBNET`}}",
          #         "private_virtual_network_with_public_ip": "{{env `PRIVATE_VIRTUAL_NETWORK_WITH_PUBLIC_IP`}}",
          #         
          #         "vm_size": "Standard_D4s_v4",
          #         "capture_name_prefix": "packer",
          #         "run_validation_diskspace": "false"
          #     },
          #     "sensitive-variables": [
          #         "client_secret"
          #     ],
          #     "builders": [
          #         {
          #             "type": "azure-arm",
          #             "client_id": "{{user `client_id`}}",
          #             "client_secret": "{{user `client_secret`}}",
          #             "subscription_id": "{{user `subscription_id`}}",
          #             "tenant_id": "{{user `tenant_id`}}",
          #             "location": "{{user `location`}}",
          #             "vm_size": "{{user `vm_size`}}",
          #             "resource_group_name": "{{user `resource_group`}}",
          #             "storage_account": "{{user `storage_account`}}",
          #             "temp_resource_group_name": "{{user `temp_resource_group_name`}}",
          #             "capture_container_name": "images",
          #             "capture_name_prefix": "{{user `capture_name_prefix`}}",
          #             "virtual_network_name": "{{user `virtual_network_name`}}",
          #             "virtual_network_resource_group_name": "{{user `virtual_network_resource_group_name`}}",
          #             "virtual_network_subnet_name": "{{user `virtual_network_subnet_name`}}",
          #             "private_virtual_network_with_public_ip": "{{user `private_virtual_network_with_public_ip`}}",
          #             "os_type": "Linux",
          #             "image_publisher": "Canonical",
          #             "image_offer": "UbuntuServer",
          #             "image_sku": "18.04-LTS",
          #             "os_disk_size_gb": "86"
          #         }
          #     ],
          #     "provisioners": [

          #         {
          #             "type": "shell",
          #             "scripts": [
          #                 "{{template_dir}}/scripts/installers/Install-Toolset.ps1",
          #                 "{{template_dir}}/scripts/installers/Configure-Toolset.ps1"
          #             ],
          #             "environment_vars": [
          #                 "HELPER_SCRIPTS={{user `helper_script_folder`}}",
          #                 "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
          #             ],
          #             "execute_command": "sudo sh -c '{{ .Vars }} pwsh -f {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "scripts": [
          #                 "{{template_dir}}/scripts/installers/pipx-packages.sh"
          #             ],
          #             "environment_vars": [
          #                 "HELPER_SCRIPTS={{user `helper_script_folder`}}",
          #                 "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
          #             ],
          #             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "scripts": [
          #                 "{{template_dir}}/scripts/installers/homebrew.sh"
          #             ],
          #             "environment_vars": [
          #                 "HELPER_SCRIPTS={{user `helper_script_folder`}}",
          #                 "DEBIAN_FRONTEND=noninteractive",
          #                 "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
          #             ],
          #             "execute_command": "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "expect_disconnect": true,
          #             "scripts": [
          #                 "{{template_dir}}/scripts/base/reboot.sh"
          #             ],
          #             "execute_command": "/bin/sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "pause_before": "60s",
          #             "start_retry_timeout": "10m",
          #             "scripts": [
          #                 "{{template_dir}}/scripts/installers/cleanup.sh"
          #             ],
          #             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "script": "{{template_dir}}/scripts/base/apt-mock-remove.sh",
          #             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "inline": [
          #                 "pwsh -File {{user `image_folder`}}/SoftwareReport/SoftwareReport.Generator.ps1 -OutputDirectory {{user `image_folder`}}",
          #                 "pwsh -File {{user `image_folder`}}/tests/RunAll-Tests.ps1 -OutputDirectory {{user `image_folder`}}"
          #             ],
          #             "environment_vars": [
          #                 "IMAGE_VERSION={{user `image_version`}}",
          #                 "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}"
          #             ]
          #         },
          #         {
          #             "type": "file",
          #             "source": "{{user `image_folder`}}/Ubuntu-Readme.md",
          #             "destination": "{{template_dir}}/Ubuntu1804-README.md",
          #             "direction": "download"
          #         },
          #         {
          #             "type": "shell",
          #             "scripts":[
          #                 "{{template_dir}}/scripts/installers/post-deployment.sh"
          #             ],
          #             "environment_vars":[
          #                 "HELPER_SCRIPT_FOLDER={{user `helper_script_folder`}}",
          #                 "INSTALLER_SCRIPT_FOLDER={{user `installer_script_folder`}}",
          #                 "IMAGE_FOLDER={{user `image_folder`}}"
          #             ],
          #             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "scripts": [
          #                 "{{template_dir}}/scripts/installers/validate-disk-space.sh"
          #             ],
          #             "environment_vars": [
          #                 "RUN_VALIDATION={{user `run_validation_diskspace`}}"
          #             ]
          #         },
          #         {
          #             "type": "file",
          #             "source": "{{template_dir}}/config/ubuntu1804.conf",
          #             "destination": "/tmp/"
          #         },
          #         {
          #             "type": "shell",
          #             "inline": [
          #                 "mkdir -p /etc/vsts",
          #                 "cp /tmp/ubuntu1804.conf /etc/vsts/machine_instance.conf"
          #             ],
          #             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
          #         },
          #         {
          #             "type": "shell",
          #             "inline": [
          #                 "sleep 30",
          #                 "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"
          #             ],
          #             "execute_command": "sudo sh -c '{{ .Vars }} {{ .Path }}'"
          #         }
          #     ]
          # }