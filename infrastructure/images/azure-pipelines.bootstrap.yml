name: 0.1.$(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - main

variables:
  - group: terraform-packer
  - name: DEBIAN_FRONTEND
    value: noninteractive
    
stages:
  - stage: 'Bootstrap'
    pool: 'Bootstrap2'
    jobs:
      - job:
        displayName: 'Initial Image Generation'
        timeoutInMinutes: 600
        cancelTimeoutInMinutes: 30
        # variables:
        #   - name: base_dir
        #     value: $(template_dir)/scripts/base
        #   - name: helper_script_folder
        #     value: $(image_folder)/helpers
        #   - name: imagedata_file
        #     value: $(image_folder)/imagedata.json
        #   - name: image_folder
        #     value: /imagegeneration
        #   - name: image_version
        #     value: dev
        #   - name: installer_script_folder
        #     value: $(image_folder)/installers
        #   - name: template_dir 
        #     value: /imagetemplate
        #   - name: toolset_version
        #     value: 1804
        #   - name: image_os
        #     value: ubuntu18
        steps:
          - checkout: self
            fetchDepth: 1


          # - task: AzureCLI@2
          #   displayName: 'Set image template variables'
          #   inputs:
          #     azureSubscription: 'Azure'
          #     scriptType: 'pscore'
          #     scriptLocation: 'inlineScript'
          #     inlineScript: |
          #       $ImageType = "$(image_type)"
          #       $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "linux" } else { "win" }
          #       $TemplateDirectoryPath = Join-Path "infrastructure/images" $TemplateDirectoryName | Resolve-Path
          #       $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.json"
          #       Write-Host "##vso[task.setvariable variable=TemplateDirectoryPath;]$TemplateDirectoryPath"
          #       Write-Host "##vso[task.setvariable variable=TemplatePath;]$TemplatePath"
          #       Write-Host "##vso[task.setvariable variable=AZURE_SUBSCRIPTION;issecret=true]$(az account show --query 'id' -o tsv)"
          #       Write-Host "##vso[task.setvariable variable=AZURE_CLIENT_ID;issecret=true]${servicePrincipalId}"
          #       Write-Host "##vso[task.setvariable variable=AZURE_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
          #       Write-Host "##vso[task.setvariable variable=AZURE_TENANT_ID;issecret=true]${tenantId}"

          # - task: AzureCLI@2
          #   displayName: 'Build VM'
          #   inputs:
          #     azureSubscription: 'Azure'
          #     scriptType: 'pscore'
          #     scriptLocation: 'scriptPath'
          #     scriptPath: './infrastructure/images/build-image.ps1'
          #     arguments: -ResourcesNamePrefix $(Build.BuildId) `
          #                       -ClientId $env:servicePrincipalId `
          #                       -ClientSecret $env:servicePrincipalKey `
          #                       -TemplatePath $(TemplatePath) `
          #                       -ResourceGroup $(AZURE_RESOURCE_GROUP) `
          #                       -StorageAccount $(AZURE_STORAGE_ACCOUNT) `
          #                       -SubscriptionId $(AZURE_SUBSCRIPTION) `
          #                       -TenantId $env:tenantId `
          #                       -Location $(AZURE_LOCATION) `
          #                       -VirtualNetworkName $(BUILD_AGENT_VNET_NAME) `
          #                       -VirtualNetworkRG $(BUILD_AGENT_VNET_RESOURCE_GROUP) `
          #                       -VirtualNetworkSubnet $(BUILD_AGENT_SUBNET_NAME) `
          #                       -GitHubFeedToken $(GITHUB_TOKEN)
          #     addSpnToEnvironment: true
          #   env:
          #     MANAGED_IMAGE_NAME: 'bootstrap-$(Build.BuildNumber)'
          #     PACKER_LOG: 1
          #     PACKER_LOG_PATH: $(Build.ArtifactStagingDirectory)/packer-log.txt
          #     SIG_IMAGE_VERSION: $(Build.BuildNumber)

          - task: Bash@3
            displayName: 'Install Tools'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                
                INSTALLER_FOLDER="./infrastructure/images/bootstrap/scripts/installers"
                chmod -Rv 777 "${INSTALLER_FOLDER}/"
                
                declare -a SCRIPTS=(
                                    "azure-cli.sh"
                                    "basic.sh"
                                    "packer.sh"
                                    "terraform.sh"
                                    )
                
                for SCRIPT in "${SCRIPTS[@]}"
                do
                  sudo -E sh -c "${INSTALLER_FOLDER}/${SCRIPT}"
                done  
            
          - task: AzureCLI@2
            enabled: false
            displayName: 'Build Bootstrap Image'
            inputs:
              azureSubscription: 'Azure'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -euo pipefail
                
                echo "Show Packer Version"
                packer --version

                packer validate -syntax-only ${TEMPLATE_PATH}

                AZURE_SUBSCRIPTION=$(az account show --query 'id' -o tsv)
                IMAGE=$(basename ${TEMPLATE_PATH} ".json")

                echo "Build ${IMAGE} VM"
                packer build    \
                                -var "client_id=${servicePrincipalId}" \
                                -var "client_secret=${servicePrincipalKey}" \
                                -var "location=${AZURE_LOCATION}" \
                                -var "managed_image_name=bootstrap-$(Build.BuildNumber)" \
                                -var "managed_image_resource_group_name=${AZURE_RESOURCE_GROUP}" \
                                -var "sig_image_version=$(Build.BuildNumber)" \
                                -var "subscription_id=${AZURE_SUBSCRIPTION}" \
                                -var "tenant_id=${tenantId}" \
                                ${TEMPLATE_PATH} 

                                #                 -var "install_password=$InstallPassword" \
                #                 -var "github_feed_token=$GitHubFeedToken" \
                #                 -var "storage_account=$StorageAccount" \
                #                 -var "temp_resource_group_name=$TempResourceGroupName" \
                #                 -var "virtual_network_name=$VirtualNetworkName" \
                #                 -var "virtual_network_resource_group_name=$VirtualNetworkRG" \
                #                 -var "virtual_network_subnet_name=$VirtualNetworkSubnet" \
                #                 -var "run_validation_diskspace=$env:RUN_VALIDATION_FLAG" \
                #                 $TemplatePath 
              addSpnToEnvironment: true
            env:
              TEMPLATE_PATH: "./infrastructure/images/bootstrap/ubuntu1804.bootstrapper.json"

          - task: Bash@3
            displayName: 'Terraform Login'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail

                mkdir -p ~/.terraform.d
                TMPFILE=$(mktemp)
                echo ${TFE_CREDENTIALS} > ${TMPFILE}
                base64 --decode ${TMPFILE} > ~/.terraform.d/credentials.tfrc.json
              failOnStderr: true
              workingDirectory: infrastructure/azure/agents
            env:
              TFE_CREDENTIALS: $(TFE_TOKEN)

          - task: Bash@3
            displayName: 'Terraform Init'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                
                terraform init -input=false
                terraform validate
                terraform -v
              failOnStderr: true
              workingDirectory: infrastructure/azure/agents

          - task: Bash@3
            displayName: 'Terraform Plan'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                
                # Creates a plan that must be approved in Terraform Cloud
                terraform apply -input=false
              failOnStderr: true
              workingDirectory: infrastructure/azure/agents
                                
          # - task: AzureCLI@2
          #   displayName: 'Clean up resources'
          #   condition: always()
          #   inputs:
          #     azureSubscription: 'Azure'
          #     scriptType: 'pscore'
          #     scriptLocation: 'scriptPath'
          #     scriptPath: './infrastructure/images/cleanup.ps1'
          #     arguments: -ResourcesNamePrefix $(Build.BuildId) `
          #                   -ClientId $env:servicePrincipalId `
          #                   -ClientSecret $env:servicePrincipalKey `
          #                   -Image $(image_type) `
          #                   -SubscriptionId $(AZURE_SUBSCRIPTION) `
          #                   -TenantId $env:tenantId
          #     addSpnToEnvironment: true



